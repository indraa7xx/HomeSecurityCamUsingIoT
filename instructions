Features

Motion Detection: Receive photo alerts on Telegram when motion is detected.

On-Demand Photos: Request photos from your ESP32-CAM directly via Telegram.

Flash Control: Take photos with or without the onboard flash.

Remote Light Control: Turn a connected light (via relay) on or off from Telegram.

Environmental Monitoring: Get temperature and humidity readings from the DHT11 sensor.

Getting Started

Prerequisites

ESP32-CAM (AI-Thinker model)

PIR Motion Sensor

DHT11 Temperature and Humidity Sensor

1-Channel Relay Module (optional, for light control)

Jumper Wires

Breadboard (optional)

A stable Wi-Fi connection

A Telegram account

Software Setup

Arduino IDE: Download and install the Arduino IDE.

ESP32 Board Manager:

Open the Arduino IDE, and go to File > Preferences.

In "Additional Board Manager URLs", add the following:
https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json

Go to Tools > Board > Boards Manager, search for "esp32" and install version 2.0.5 (or a compatible version).

Libraries: Install the following libraries via Sketch > Include Library > Manage Libraries...:

UniversalTelegramBot (1.3.0): Search for "Universal Telegram Bot" by Witnessmenow.

ArduinoJson (6.20.0): Search for "ArduinoJson" by Benoit Blanchon.

DHT sensor library (1.4.4): Search for "DHT sensor library" by Adafruit.

Telegram Bot Setup

Create a New Bot:

Open Telegram and search for @BotFather.

Send /newbot to BotFather and follow the instructions to create your bot.

BotFather will provide you with a BOT_TOKEN. Save this token!

Get your Chat ID:

Search for @myidbot in Telegram.

Start a chat with it and send /start. It will return your CHAT_ID. Save this ID.

Hardware Connections

Connect the components as follows:

PIR Sensor:

VCC to 3.3V (ESP32-CAM)

GND to GND (ESP32-CAM)

OUT to GPIO 13 (ESP32-CAM)

DHT11 Sensor:

VCC to 3.3V (ESP32-CAM)

GND to GND (ESP32-CAM)

DATA to GPIO 2 (ESP32-CAM)

Relay Module (for light):

VCC to 3.3V (ESP32-CAM)

GND to GND (ESP32-CAM)

IN to GPIO 12 (ESP32-CAM)

Flash LED (On-board):

GPIO 4 (already connected on the ESP32-CAM board)

Configuration

Open the esp32_cam_telegram.ino file in your Arduino IDE and modify the following lines:

const char* ssid = "YOUR_WIFI_NAME";        // Replace with your WiFi Name
const char* password = "YOUR_WIFI_PASSWORD";    // Replace with your WiFi Password

String chatId = "YOUR_CHAT_ID";         // Replace with your Telegram Chat ID
String BOTtoken = "YOUR_BOT_TOKEN";       // Replace with your Telegram Bot Token


Uploading the Code

Select your board: Tools > Board > ESP32 Arduino > AI Thinker ESP32-CAM.

Select the correct COM Port: Tools > Port > (Your ESP32-CAM Port).

Important: Before uploading, you might need to press and hold the RST or BOOT button on the ESP32-CAM. Release it when you see "Connecting....." in the Arduino IDE console.

Click the "Upload" button.

Usage

Once the code is uploaded and your device is connected to Wi-Fi, open your Telegram chat with the bot you created.

Send /start to see a list of available commands.

/photo: Takes a photo and sends it to your chat.

/photoWithFlash: Takes a photo with the onboard flash LED.

/lightOn: Turns on the relay connected to GPIO 12.

/lightOff: Turns off the relay connected to GPIO 12.

/motionOn: Enables motion detection. The camera will send a photo whenever motion is detected.

/motionOff: Disables motion detection.

/weather: Gets the current temperature and humidity.
